name: 🚀 CI/CD Pipeline - Room Booking System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🧪 Testing Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_room_booking
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django

    - name: 🔧 Setup Test Environment
      run: |
        cp .env.example .env.test
        echo "DEBUG=0" >> .env.test
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_NAME=test_room_booking" >> .env.test
        echo "DB_USER=root" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test

    - name: 🗄️ Run Database Migrations
      run: |
        python manage.py migrate --settings=room_usage_project.settings_test
      env:
        DATABASE_URL: mysql://root:test_password@127.0.0.1:3306/test_room_booking

    - name: 🧪 Run Unit Tests
      run: |
        coverage run --source='.' manage.py test --settings=room_usage_project.settings_test
        coverage report
        coverage xml

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 🔍 Code Quality Check (flake8)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # 🔒 Security Scan Job
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔍 Run Safety Check
      run: |
        pip install safety
        safety check -r requirements.txt

    - name: 🛡️ Run Bandit Security Linter
      run: |
        pip install bandit
        bandit -r . -x ./venv,./tests

  # 🐳 Docker Build Job
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: room-booking-system:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Image
      run: |
        docker run --rm -d --name test-app \
          -e DEBUG=0 \
          -e SECRET_KEY=test-key \
          -p 8000:8000 \
          room-booking-system:latest
        
        # Wait for app to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/ || exit 1
        
        # Cleanup
        docker stop test-app

    - name: 🚀 Push to Docker Hub
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/room-booking-system:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/room-booking-system:${{ github.sha }}

  # 🚀 Deploy Job (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/room-booking-system
          git pull origin main
          docker-compose pull
          docker-compose up -d --no-deps web
          docker-compose exec -T web python manage.py migrate
          docker-compose exec -T web python manage.py collectstatic --noinput

    - name: 🏥 Health Check
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/health/ || exit 1

    - name: 📢 Deployment Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 Room Booking System deployed to production!
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
